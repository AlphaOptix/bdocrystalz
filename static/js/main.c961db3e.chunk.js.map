{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DataView","lazy","darkTheme","createMuiTheme","palette","type","responsiveFontSizes","App","ThemeProvider","theme","CssBaseline","Container","style","paddingTop","paddingBottom","disableGutters","Typography","variant","component","gutterBottom","color","Link","target","rel","href","fallback","display","justifyContent","CircularProgress","disableShrink","size","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAaMA,EAAWC,gBAAK,kBAAM,iCAExBC,EAAYC,YAAe,CAC7BC,QAAS,CACPC,KAAM,UAGVH,EAAYI,YAAoBJ,GA8DjBK,MA5Df,WACE,OACE,eAACC,EAAA,EAAD,CAAeC,MAAOP,EAAtB,UACE,cAACQ,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,WAAY,GAAIC,cAAe,IAAnD,UACE,eAACH,EAAA,EAAD,CAAWC,MAAO,CAAEE,cAAe,IAAMC,gBAAc,EAAvD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAApD,0BAGA,eAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAApD,mDACwC,cAACH,EAAA,EAAD,CAAYJ,MAAO,CAAEQ,MAAO,WAA5B,oCAExC,cAACJ,EAAA,EAAD,CAAYG,cAAY,EAAxB,mGAIA,eAACH,EAAA,EAAD,CAAYG,cAAY,EAAxB,sRAIkE,IAChE,uCALF,KAKkB,uDALlB,IAKkD,IAChD,uDANF,QAMsC,IACpC,kFAEF,eAACH,EAAA,EAAD,CAAYG,cAAY,EAAxB,uFAEY,2CAFZ,OAEsC,kDAFtC,UAGM,IACJ,cAACE,EAAA,EAAD,CACEC,OAAO,SACPC,IAAI,aACJC,KAAK,4CAHP,oBAJF,UAcF,cAAC,WAAD,CACEC,SACE,cAACd,EAAA,EAAD,CAAWC,MAAO,CAAEc,QAAS,OAAQC,eAAgB,UAArD,SACE,cAACC,EAAA,EAAD,CAAkBC,eAAa,EAACC,KAAM,OAH5C,SAOE,cAAC9B,EAAD,MAEF,cAACW,EAAA,EAAD,CACEC,MAAO,CAAEmB,UAAW,GAAIL,QAAS,OAAQC,eAAgB,UAD3D,SAGE,cAACX,EAAA,EAAD,CAAYC,QAAQ,QAApB,0DC7DKe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c961db3e.chunk.js","sourcesContent":["import Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport {\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n  ThemeProvider,\n  responsiveFontSizes\n} from '@material-ui/core/styles'\nimport './App.css'\nimport React, { Suspense, lazy } from 'react'\nimport 'fontsource-roboto'\nimport { CircularProgress, Link } from '@material-ui/core'\n\nconst DataView = lazy(() => import('./components/DataView'))\n\nlet darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  }\n})\ndarkTheme = responsiveFontSizes(darkTheme)\n\nfunction App () {\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Container style={{ paddingTop: 25, paddingBottom: 25 }}>\n        <Container style={{ paddingBottom: 30 }} disableGutters>\n          <Typography variant='h4' component='h1' gutterBottom>\n            BDO Crystalz\n          </Typography>\n          <Typography variant='h6' component='h2' gutterBottom>\n            Black Desert Online Crystal Reference <Typography style={{ color: \"DarkRed\" }}>(Note: Out of date)</Typography>\n          </Typography>\n          <Typography gutterBottom>\n            Need to know if there is an AP crystal for your offhand weapon? Now\n            you can find out!\n          </Typography>\n          <Typography gutterBottom>\n            This is a reference for Black Desert Online items called crystals.\n            Crystals are used to slot into specific gear pieces in order to give\n            you some added effects. With this site, you can easily find which\n            crystals suit your specific needs by filtering by the crystal's{' '}\n            <em>grade</em>, <em>the effects it grants</em>,{' '}\n            <em>which slot it goes in</em>, and{' '}\n            <em>how often it is likely to break when you die.</em>\n          </Typography>\n          <Typography gutterBottom>\n            See something that's wrong? Have a suggestion for new features?\n            Create an <strong>issue</strong> or <strong>pull request</strong> on\n            our{' '}\n            <Link\n              target='_blank'\n              rel='noreferrer'\n              href='https://github.com/AlphaOptix/bdocrystalz'\n            >\n              Github\n            </Link>\n            .\n          </Typography>\n        </Container>\n        <Suspense\n          fallback={\n            <Container style={{ display: 'flex', justifyContent: 'center' }}>\n              <CircularProgress disableShrink size={40} />\n            </Container>\n          }\n        >\n          <DataView />\n        </Suspense>\n        <Container\n          style={{ marginTop: 25, display: 'flex', justifyContent: 'center' }}\n        >\n          <Typography variant='body2'>\n            Copyright &copy; 2016-2021 AlphaOptix\n          </Typography>\n        </Container>\n      </Container>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}