{"version":3,"sources":["components/FilterMenu/index.js","components/FilterPanel/index.js"],"names":["EffectControl","lazy","GradeControl","SearchControl","SocketControl","BreakControl","FilterMenu","crystals","setCrystals","anchor","setAnchor","useState","sockets","effects","breakChance","grades","name","value","state","setState","searchValue","setSearchValue","socketValue","setSocketValue","breakValue","setBreakValue","effectValue","setEffectValue","gradeValue","setGradeValue","filterTimeout","useRef","useEffect","handleKeyUp","e","code","document","addEventListener","removeEventListener","socketList","Set","effectList","breakList","forEach","crystal","add","socket","effect","split","plusIndex","indexOf","substr","trim","delete","s","sort","handleClose","clearTimeout","current","filteredCrystals","setTimeout","filter","toUpperCase","includes","grade","hasEffect","open","Boolean","id","undefined","Popover","anchorEl","onClose","placement","disablePortal","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","style","width","padding","fallback","Container","display","justifyContent","CircularProgress","disableShrink","size","textAlign","paddingTop","Button","color","onClick","FilterPanel","flexDirection","paddingBottom","disableGutters","variant","disableElevation","event","currentTarget"],"mappings":"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","file":"static/js/16.d84a6701.chunk.js","sourcesContent":["import { Button, Popover, Container, CircularProgress } from '@material-ui/core';\nimport { useState, useEffect, useRef, lazy, Suspense } from 'react';\n\nconst EffectControl = lazy(() => import('./EffectControl'));\nconst GradeControl = lazy(() => import('./GradeControl'));\nconst SearchControl = lazy(() => import('./SearchControl'));\nconst SocketControl = lazy(() => import('./SocketControl'));\nconst BreakControl = lazy(() => import('./BreakControl'));\n\nfunction FilterMenu({crystals, setCrystals, anchor, setAnchor}){\n    const [state, setState] = useState({\n        sockets: [],\n        effects: [],\n        breakChance: [],\n        grades: [\n            {\n                name: \"White\",\n                value: \"0\"\n            },\n            {\n                name: \"Green\",\n                value: \"1\"\n            },\n            {\n                name: \"Blue\",\n                value: \"2\"\n            },\n            {\n                name: \"Yellow\",\n                value: \"3\"\n            },\n            {\n                name: \"Orange\",\n                value: \"4\"\n            }\n        ]\n    });\n\n    const [searchValue, setSearchValue] = useState(\"\"),\n    [socketValue, setSocketValue] = useState(\"All\"),\n    [breakValue, setBreakValue]   = useState(\"All\"),\n    [effectValue, setEffectValue] = useState(\"All\"),\n    [gradeValue, setGradeValue]   = useState(\"All\");\n\n    const filterTimeout = useRef();\n\n    useEffect(() => {\n        function handleKeyUp(e) {\n            if(e.code === \"Enter\" || e.code === \"Escape\") {\n                setAnchor(null);\n            }\n        }\n\n        document.addEventListener('keyup', handleKeyUp);\n\n        return function cleanup() {\n            document.removeEventListener('keyup', handleKeyUp);\n        }\n    }, [setAnchor]);\n\n    useEffect(() => {\n        const socketList = new Set();\n        const effectList = new Set();\n        const breakList = new Set();\n\n        crystals.forEach(crystal => {\n            breakList.add(crystal.breakChance);\n            socketList.add(crystal.socket);\n            crystal.effect.split(',').forEach(effect => {\n                const plusIndex = effect.indexOf('+');\n                effectList.add(effect.substr(0,plusIndex).trim());\n            });\n            effectList.delete(\"\");\n        });\n\n        setState(s => ({\n            ...s,\n            breakChance: [...breakList],\n            sockets: [...socketList].sort(),\n            effects: [...effectList].sort()\n        }));\n    },[crystals]);\n  \n    const handleClose = () => {\n        setAnchor(null);\n    };\n\n    useEffect(() => {\n        clearTimeout(filterTimeout.current);\n        let filteredCrystals = [];\n        filterTimeout.current = setTimeout(() => {\n            filteredCrystals = crystals.filter(crystal => {\n                if (!crystal.name.toUpperCase().includes(searchValue.toUpperCase())) return false;\n                if (socketValue !== 'All' && crystal.socket !== socketValue) return false;\n                if (breakValue !== 'All' && crystal.breakChance !== breakValue) return false;\n                if (gradeValue !== 'All' && crystal.grade !== gradeValue) return false;\n                let hasEffect = false;\n                crystal.effect.split(',').forEach(effect => {\n                    const plusIndex = effect.indexOf('+');\n                    if (effect.substr(0,plusIndex).trim() === effectValue) hasEffect = true;\n                });\n                if (effectValue !== 'All' && hasEffect === false) return false;\n                return true;\n            });\n            setCrystals(filteredCrystals);\n        }, 250);\n    }, [searchValue, breakValue, effectValue, socketValue, gradeValue, crystals, setCrystals]);\n\n\n    const open = Boolean(anchor);\n    const id = open ? 'simple-popover' : undefined;\n\n    return(\n        <Popover\n            id={id}\n            open={open}\n            anchorEl={anchor}\n            onClose={handleClose}\n            placement=\"bottom-end\"\n            disablePortal={false}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            PaperProps={{\n                style: {\n                    width: 450,\n                    padding: '20px 0'\n                }\n            }}\n        >\n            <Suspense fallback={\n                <Container style={{ display: 'flex', justifyContent: 'center' }}>\n                <CircularProgress disableShrink size={40} />\n                </Container>\n            }>\n                <SearchControl searchValue={searchValue} setSearchValue={setSearchValue} /> \n                <GradeControl grades={state.grades} gradeValue={gradeValue} setGradeValue={setGradeValue} />\n                <EffectControl effects={state.effects} effectValue={effectValue} setEffectValue={setEffectValue} />\n                <BreakControl breakChance={state.breakChance} breakValue={breakValue} setBreakValue={setBreakValue} />\n                <SocketControl sockets={state.sockets} socketValue={socketValue} setSocketValue={setSocketValue} />\n                <Container style={{ textAlign: 'right', paddingTop: 10 }}>\n                    <Button color=\"secondary\" onClick={() => {\n                        setSearchValue('');\n                        setEffectValue('All');\n                        setBreakValue('All');\n                        setSocketValue('All');\n                        setGradeValue('All');\n                    }}>Clear All</Button>\n                    <Button onClick={handleClose}>Close</Button>\n                </Container>\n            </Suspense>\n        </Popover>\n    );\n}\n\nexport default FilterMenu;","import { Button, Container } from '@material-ui/core';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { useState } from 'react';\nimport FilterMenu from '../FilterMenu';\n\n\nfunction FilterPanel({crystals, setCrystals}) {\n    const [anchor, setAnchor] = useState(null);\n\n\n    const handleClick = (event) => {\n        if(anchor) {\n            setAnchor(null);\n        } else {\n            setAnchor(event.currentTarget);\n        }\n    };\n\n    return (\n        <Container style={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'row', paddingBottom: 10 }} disableGutters>\n                <Button variant=\"contained\" disableElevation onClick={handleClick}>\n                    <FilterListIcon /> Filter\n                </Button>\n                <FilterMenu crystals={crystals} setCrystals={setCrystals} anchor={anchor} setAnchor={setAnchor} />\n        </Container>\n    )\n}\n\nexport default FilterPanel;"],"sourceRoot":""}